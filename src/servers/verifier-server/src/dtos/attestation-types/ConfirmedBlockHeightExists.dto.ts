//////////////////////////////////////////////////////////////////////////////////////////
/////// THIS CODE IS AUTOGENERATED. DO NOT CHANGE!!!                             /////////
//////////////////////////////////////////////////////////////////////////////////////////
import { ApiProperty, OmitType } from "@nestjs/swagger";
import { Type } from "class-transformer";
import {
    Validate,
    IsBoolean,
    ValidationArguments,
    ValidatorConstraint,
    ValidatorConstraintInterface,
    IsDefined,
    IsNotEmptyObject,
    IsObject,
    ValidateNested,
} from "class-validator";

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// CUSTOM VALIDATORS ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "unsigned-int", async: false })
class IsUnsignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a string of decimal unsigned number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^0x[0-9a-fA-F]+$/i.test(text) || /^[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a decimal number in string or 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "signed-int", async: false })
class IsSignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^-?0x[0-9a-fA-F]+$/i.test(text) || /^-?[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a signed decimal integer in string or signed 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
 */
@ValidatorConstraint({ name: "hash-32", async: false })
class IsHash32 implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{64}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 32 bytes";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string
 */
@ValidatorConstraint({ name: "hash-0x", async: false })
class Is0xHex implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]+$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
 */
@ValidatorConstraint({ name: "evm-address", async: false })
class IsEVMAddress implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{40}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 20 bytes (EVM address)";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// DTOs /////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

export class ConfirmedBlockHeightExists_ResponseBody {
    constructor(params: Required<ConfirmedBlockHeightExists_ResponseBody>) {
        Object.assign(this, params);
    }

    /**
     * The timestamp of the block with `blockNumber`.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The timestamp of the block with 'blockNumber'.`, example: "123" })
    blockTimestamp: string;

    /**
     * The depth at which a block is considered confirmed depending on the chain. All attestation clients must agree on this number.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({
        description: `The depth at which a block is considered confirmed depending on the chain. All attestation clients must agree on this number.`,
        example: "123",
    })
    numberOfConfirmations: string;

    /**
     * The block number of the latest block that has a timestamp strictly smaller than `blockTimestamp` - `queryWindow`.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({
        description: `The block number of the latest block that has a timestamp strictly smaller than 'blockTimestamp' - 'queryWindow'.`,
        example: "123",
    })
    lowestQueryWindowBlockNumber: string;

    /**
     * The timestamp of the block at height `lowestQueryWindowBlockNumber`.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The timestamp of the block at height 'lowestQueryWindowBlockNumber'.`, example: "123" })
    lowestQueryWindowBlockTimestamp: string;
}
export class ConfirmedBlockHeightExists_RequestBody {
    constructor(params: Required<ConfirmedBlockHeightExists_RequestBody>) {
        Object.assign(this, params);
    }

    /**
     * The number of the block the request wants a confirmation of.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The number of the block the request wants a confirmation of.`, example: "123" })
    blockNumber: string;

    /**
     * The period in seconds for sampling. The range is from `blockNumber` to the blockNumber of the first block more than queryWindow before the `blockNumber`.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({
        description: `The period in seconds for sampling. The range is from 'blockNumber' to the blockNumber of the first block more than queryWindow before the 'blockNumber'.`,
        example: "123",
    })
    queryWindow: string;
}
export class ConfirmedBlockHeightExists_Request {
    constructor(params: Required<ConfirmedBlockHeightExists_Request>) {
        Object.assign(this, params);
    }

    /**
     * Id of the attestation type.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Id of the attestation type.`, example: "0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000" })
    attestationType: string;

    /**
     * Id of the data source.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Id of the data source.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * `MessageIntegrityCode` that is derived from the expected response as defined [here](/specs/attestations/hash-MIC.md#message-integrity-code).
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `'MessageIntegrityCode' that is derived from the expected response as defined [here](/specs/attestations/hash-MIC.md#message-integrity-code).`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    messageIntegrityCode: string;

    /**
     * Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.
     */
    @ValidateNested()
    @Type(() => ConfirmedBlockHeightExists_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Data defining the request. Type (struct) and interpretation is determined by the 'attestationType'.` })
    requestBody: ConfirmedBlockHeightExists_RequestBody;
}
export class ConfirmedBlockHeightExists_Response {
    constructor(params: Required<ConfirmedBlockHeightExists_Response>) {
        Object.assign(this, params);
    }

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x436f6e6669726d6564426c6f636b486569676874457869737473000000000000" })
    attestationType: string;

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * The id of the state connector round in which the request was considered.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The id of the state connector round in which the request was considered.`, example: "123" })
    votingRound: string;

    /**
     * The lowest timestamp used to generate the response.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The lowest timestamp used to generate the response.`, example: "123" })
    lowestUsedTimestamp: string;

    /**
     * Extracted from the request.
     */
    @ValidateNested()
    @Type(() => ConfirmedBlockHeightExists_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Extracted from the request.` })
    requestBody: ConfirmedBlockHeightExists_RequestBody;

    /**
     * Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.
     */
    @ValidateNested()
    @Type(() => ConfirmedBlockHeightExists_ResponseBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({
        description: `Data defining the response. The verification rules for the construction of the response body and the type are defined per specific 'attestationType'.`,
    })
    responseBody: ConfirmedBlockHeightExists_ResponseBody;
}
export class ConfirmedBlockHeightExists_Proof {
    constructor(params: Required<ConfirmedBlockHeightExists_Proof>) {
        Object.assign(this, params);
    }

    /**
     * Merkle proof corresponding to the attestation response.
     */
    @Validate(IsHash32, { each: true })
    @ApiProperty({
        description: `Merkle proof corresponding to the attestation response.`,
        example: ["0x0000000000000000000000000000000000000000000000000000000000000000"],
    })
    merkleProof: string[];

    /**
     * Attestation response.
     */
    @ValidateNested()
    @Type(() => ConfirmedBlockHeightExists_Response)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Attestation response.` })
    data: ConfirmedBlockHeightExists_Response;
}

export class ConfirmedBlockHeightExists_RequestNoMic extends OmitType<ConfirmedBlockHeightExists_Request, "messageIntegrityCode">(
    ConfirmedBlockHeightExists_Request,
    ["messageIntegrityCode"] as const,
) {}
