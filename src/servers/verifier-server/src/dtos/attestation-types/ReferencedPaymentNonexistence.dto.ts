//////////////////////////////////////////////////////////////////////////////////////////
/////// THIS CODE IS AUTOGENERATED. DO NOT CHANGE!!!                             /////////
//////////////////////////////////////////////////////////////////////////////////////////
import { ApiProperty, OmitType } from "@nestjs/swagger";
import { Type } from "class-transformer";
import {
    Validate,
    IsBoolean,
    ValidationArguments,
    ValidatorConstraint,
    ValidatorConstraintInterface,
    IsDefined,
    IsNotEmptyObject,
    IsObject,
    ValidateNested,
} from "class-validator";

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// CUSTOM VALIDATORS ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "unsigned-int", async: false })
class IsUnsignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a string of decimal unsigned number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^0x[0-9a-fA-F]+$/i.test(text) || /^[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a decimal number in string or 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "signed-int", async: false })
class IsSignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^-?0x[0-9a-fA-F]+$/i.test(text) || /^-?[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a signed decimal integer in string or signed 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
 */
@ValidatorConstraint({ name: "hash-32", async: false })
class IsHash32 implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{64}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 32 bytes";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string
 */
@ValidatorConstraint({ name: "hash-0x", async: false })
class Is0xHex implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]+$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
 */
@ValidatorConstraint({ name: "evm-address", async: false })
class IsEVMAddress implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{40}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 20 bytes (EVM address)";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// DTOs /////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

export class ReferencedPaymentNonexistence_ResponseBody {
    constructor(params: Required<ReferencedPaymentNonexistence_ResponseBody>) {
        Object.assign(this, params);
    }

    /**
     * Timestamp of the minimalBlock.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `Timestamp of the minimalBlock.`, example: "123" })
    minimalBlockTimestamp!: string;

    /**
     * Height of the firstOverflowBlock.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `Height of the firstOverflowBlock.`, example: "123" })
    firstOverflowBlockNumber!: string;

    /**
     * Timestamp of the firstOverflowBlock.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `Timestamp of the firstOverflowBlock.`, example: "123" })
    firstOverflowBlockTimestamp!: string;
}
export class ReferencedPaymentNonexistence_RequestBody {
    constructor(params: Required<ReferencedPaymentNonexistence_RequestBody>) {
        Object.assign(this, params);
    }

    /**
     * The start block of the search range.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The start block of the search range.`, example: "123" })
    minimalBlockNumber!: string;

    /**
     * The blockNumber to be included in the search range.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The blockNumber to be included in the search range.`, example: "123" })
    deadlineBlockNumber!: string;

    /**
     * The timestamp to be included in the search range.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The timestamp to be included in the search range.`, example: "123" })
    deadlineTimestamp!: string;

    /**
     * address hash of the address to which the payment had to be done.
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `address hash of the address to which the payment had to be done.`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    destinationAddressHash!: string;

    /**
     * The requested amount that had to be payed.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The requested amount that had to be payed.`, example: "123" })
    amount!: string;

    /**
     * The requested standard payment reference.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `The requested standard payment reference.`, example: "0x0000000000000000000000000000000000000000000000000000000000000000" })
    standardPaymentReference!: string;
}
export class ReferencedPaymentNonexistence_Request {
    constructor(params: Required<ReferencedPaymentNonexistence_Request>) {
        Object.assign(this, params);
    }

    /**
     * Id of the attestation type.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Id of the attestation type.`, example: "0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000" })
    attestationType!: string;

    /**
     * Data source id as defined [here](/attestation-objects/enums.md).
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `Data source id as defined [here](/attestation-objects/enums.md).`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    sourceId!: string;

    /**
     * `MessageIntegrityCode` that is derived from the expected response as defined [here](/attestation-objects/MIC.md#message-integrity-code).
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `'MessageIntegrityCode' that is derived from the expected response as defined [here](/attestation-objects/MIC.md#message-integrity-code).`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    messageIntegrityCode!: string;

    /**
     * Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.
     */

    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ValidateNested()
    @Type(() => ReferencedPaymentNonexistence_RequestBody)
    @ApiProperty({ description: `Data defining the request. Type (struct) and interpretation is determined by the 'attestationType'.` })
    requestBody!: ReferencedPaymentNonexistence_RequestBody;
}
export class ReferencedPaymentNonexistence_Response {
    constructor(params: Required<ReferencedPaymentNonexistence_Response>) {
        Object.assign(this, params);
    }

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x5265666572656e6365645061796d656e744e6f6e6578697374656e6365000000" })
    attestationType!: string;

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x0000000000000000000000000000000000000000000000000000000000000000" })
    sourceId!: string;

    /**
     * The id of the state connector round in which the request was considered. This is a security measure to prevent collision of attestation hashes.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({
        description: `The id of the state connector round in which the request was considered. This is a security measure to prevent collision of attestation hashes.`,
        example: "123",
    })
    votingRound!: string;

    /**
     * The lowest timestamp used to generate the response.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The lowest timestamp used to generate the response.`, example: "123" })
    lowestUsedTimestamp!: string;

    /**
     * Extracted from the request.
     */

    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ValidateNested()
    @Type(() => ReferencedPaymentNonexistence_RequestBody)
    @ApiProperty({ description: `Extracted from the request.` })
    requestBody!: ReferencedPaymentNonexistence_RequestBody;

    /**
     * Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.
     */

    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ValidateNested()
    @Type(() => ReferencedPaymentNonexistence_ResponseBody)
    @ApiProperty({
        description: `Data defining the response. The verification rules for the construction of the response body and the type are defined per specific 'attestationType'.`,
    })
    responseBody!: ReferencedPaymentNonexistence_ResponseBody;
}
export class ReferencedPaymentNonexistence_Proof {
    constructor(params: Required<ReferencedPaymentNonexistence_Proof>) {
        Object.assign(this, params);
    }

    /**
     * Merkle proof corresponding to the attestation response.
     */
    @Validate(IsHash32, { each: true })
    @ApiProperty({
        description: `Merkle proof corresponding to the attestation response.`,
        example: ["0x0000000000000000000000000000000000000000000000000000000000000000"],
    })
    merkleProof!: string[];

    /**
     * Attestation response.
     */

    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ValidateNested()
    @Type(() => ReferencedPaymentNonexistence_Response)
    @ApiProperty({ description: `Attestation response.` })
    data!: ReferencedPaymentNonexistence_Response;
}

export class ReferencedPaymentNonexistence_RequestNoMic extends OmitType<ReferencedPaymentNonexistence_Request, "messageIntegrityCode">(
    ReferencedPaymentNonexistence_Request,
    ["messageIntegrityCode"] as const,
) {}
