//////////////////////////////////////////////////////////////////////////////////////////
/////// THIS CODE IS AUTOGENERATED. DO NOT CHANGE!!!                             /////////
//////////////////////////////////////////////////////////////////////////////////////////
import { ApiProperty, OmitType } from "@nestjs/swagger";
import { Type } from "class-transformer";
import {
    Validate,
    IsBoolean,
    ValidationArguments,
    ValidatorConstraint,
    ValidatorConstraintInterface,
    IsDefined,
    IsNotEmptyObject,
    IsObject,
    ValidateNested,
} from "class-validator";

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// CUSTOM VALIDATORS ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "unsigned-int", async: false })
class IsUnsignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a string of decimal unsigned number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^0x[0-9a-fA-F]+$/i.test(text) || /^[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a decimal number in string or 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a number or 0x-prefixed hexadecimal string.
 */
@ValidatorConstraint({ name: "signed-int", async: false })
class IsSignedIntLike implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a number or 0x-prefixed hexadecimal string.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && (/^-?0x[0-9a-fA-F]+$/i.test(text) || /^-?[0-9]+$/i.test(text));
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not a signed decimal integer in string or signed 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
 */
@ValidatorConstraint({ name: "hash-32", async: false })
class IsHash32 implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string representing 32 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{64}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 32 bytes";
    }
}

/**
 * Validator constraint if the given value is a 0x-prefixed hexadecimal string
 */
@ValidatorConstraint({ name: "hash-0x", async: false })
class Is0xHex implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is a 0x-prefixed hexadecimal string
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]+$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string";
    }
}

/**
 * Validator constraint if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
 */
@ValidatorConstraint({ name: "evm-address", async: false })
class IsEVMAddress implements ValidatorConstraintInterface {
    /**
     * Validates if the given value is an EVM address, hence 0x-prefixed hexadecimal string representing 20 bytes.
     * @param text
     * @param args
     * @returns
     */
    validate(text: any, _args: ValidationArguments) {
        return typeof text === "string" && /^0x[0-9a-f]{40}$/i.test(text);
    }

    /**
     * Returns the default error message template.
     * @param args
     * @returns
     */
    defaultMessage(_args: ValidationArguments) {
        return "($property) value ($value) is not 0x-prefixed hexadecimal string representing 20 bytes (EVM address)";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////// DTOs /////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Attestation status
 */
export enum AttestationResponseStatus {
    /**
     * Attestation request is valid.
     */
    VALID = "VALID",
    /**
     * Attestation request is invalid.
     */
    INVALID = "INVALID",
    /**
     * Attestation request cannot be confirmed neither rejected by the verifier at the moment.
     */
    INDETERMINATE = "INDETERMINATE",
}

/**
 * Attestation response for specific attestation type (flattened)
 */
export class AttestationResponseDTO_AddressValidity_Response {
    constructor(params: Required<AttestationResponseDTO_AddressValidity_Response>) {
        Object.assign(this, params);
    }

    status: AttestationResponseStatus;

    response?: AddressValidity_Response;
}

export class AddressValidity_ResponseBody {
    constructor(params: Required<AddressValidity_ResponseBody>) {
        Object.assign(this, params);
    }

    /**
     * Standard form of the validated address.
     */
    @ApiProperty({ description: `Standard form of the validated address.`, example: "Example string" })
    standardAddress: string;

    /**
     * Standard address hash of the validated address.
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `Standard address hash of the validated address.`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    standardAddressHash: string;
}
export class AddressValidity_RequestBody {
    constructor(params: Required<AddressValidity_RequestBody>) {
        Object.assign(this, params);
    }

    /**
     * Address to be verified.
     */
    @ApiProperty({ description: `Address to be verified.`, example: "Example string" })
    addressStr: string;
}
export class AddressValidity_Request {
    constructor(params: Required<AddressValidity_Request>) {
        Object.assign(this, params);
    }

    /**
     * Attestation type id as defined for each attestation type on [this repo](https://gitlab.com/flarenetwork/state-connector-protocol/)
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `Attestation type id as defined for each attestation type on [this repo](https://gitlab.com/flarenetwork/state-connector-protocol/)`,
        example: "0x4164647265737356616c69646974790000000000000000000000000000000000",
    })
    attestationType: string;

    /**
     * Id of the data source.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Id of the data source.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * `MessageIntegrityCode` that is derived from the expected response as defined [here](/specs/attestations/hash-MIC.md#message-integrity-code).
     */
    @Validate(IsHash32)
    @ApiProperty({
        description: `'MessageIntegrityCode' that is derived from the expected response as defined [here](/specs/attestations/hash-MIC.md#message-integrity-code).`,
        example: "0x0000000000000000000000000000000000000000000000000000000000000000",
    })
    messageIntegrityCode: string;

    /**
     * Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.
     */
    @ValidateNested()
    @Type(() => AddressValidity_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Data defining the request. Type (struct) and interpretation is determined by the 'attestationType'.` })
    requestBody: AddressValidity_RequestBody;
}
export class AddressValidity_Response {
    constructor(params: Required<AddressValidity_Response>) {
        Object.assign(this, params);
    }

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x4164647265737356616c69646974790000000000000000000000000000000000" })
    attestationType: string;

    /**
     * Extracted from the request.
     */
    @Validate(IsHash32)
    @ApiProperty({ description: `Extracted from the request.`, example: "0x4254430000000000000000000000000000000000000000000000000000000000" })
    sourceId: string;

    /**
     * The id of the state connector round in which the request was considered.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The id of the state connector round in which the request was considered.`, example: "123" })
    votingRound: string;

    /**
     * The lowest timestamp used to generate the response.
     */
    @Validate(IsUnsignedIntLike)
    @ApiProperty({ description: `The lowest timestamp used to generate the response.`, example: "123" })
    lowestUsedTimestamp: string;

    /**
     * Extracted from the request.
     */
    @ValidateNested()
    @Type(() => AddressValidity_RequestBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Extracted from the request.` })
    requestBody: AddressValidity_RequestBody;

    /**
     * Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.
     */
    @ValidateNested()
    @Type(() => AddressValidity_ResponseBody)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({
        description: `Data defining the response. The verification rules for the construction of the response body and the type are defined per specific 'attestationType'.`,
    })
    responseBody: AddressValidity_ResponseBody;
}
export class AddressValidity_Proof {
    constructor(params: Required<AddressValidity_Proof>) {
        Object.assign(this, params);
    }

    /**
     * Merkle proof corresponding to the attestation response.
     */
    @Validate(IsHash32, { each: true })
    @ApiProperty({
        description: `Merkle proof corresponding to the attestation response.`,
        example: ["0x0000000000000000000000000000000000000000000000000000000000000000"],
    })
    merkleProof: string[];

    /**
     * Attestation response.
     */
    @ValidateNested()
    @Type(() => AddressValidity_Response)
    @IsDefined()
    @IsNotEmptyObject()
    @IsObject()
    @ApiProperty({ description: `Attestation response.` })
    data: AddressValidity_Response;
}

export class AddressValidity_RequestNoMic extends OmitType<AddressValidity_Request, "messageIntegrityCode">(AddressValidity_Request, [
    "messageIntegrityCode",
] as const) {}
